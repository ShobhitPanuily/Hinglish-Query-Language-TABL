mport streamlit as st
import pandas as pd
from streamlit_ace import st_ace
from compiler.lexer import tokenize
from compiler.parser import parse
from compiler.semantic import check_ast, get_database


st.set_page_config(page_title="TABL Compiler Editor", layout="wide")

if "command_tables" not in st.session_state:
    st.session_state.command_tables = []  



if "output" not in st.session_state:
    st.session_state.output = ""


theme_mode = st.sidebar.radio("Choose Theme", ["Light Mode", "Dark Mode"])
editor_theme = "chrome" if theme_mode == "Light Mode" else "monokai"


light_css = """
    <style>
    body, .stApp {
        background: linear-gradient(180deg, #ffffff, #f7f9fc);
        color: #111111;
    }
    .stButton>button {
        background-color: #2196f3 ;
        color: white ;
        font-weight: bold;
        padding: 10px 24px;
        border-radius: 10px;
    }
    .stButton>button:hover {
        background-color: #1e88e5 ;
    }
    h1, h2, h3, h4 {
        color: #0d47a1 ;
    }
    .block-container {
        padding-top: 2rem;
    }
    .stDownloadButton>button {
        background-color: #4caf50 ;
        color: white ;
        font-weight: bold;
        padding: 10px 20px;
        border-radius: 10px;
        margin-top: 10px;
    }
    .stDownloadButton>button:hover {
        background-color: #45a049 ;
    }

    </style>
"""

dark_css = """
    <style>
    body, .stApp {
        background-color: #121212;
        color: #FFFFFF;
    }
    .stButton>button {
        background-color: #f57c00 !important;
        color: #fff !important;
        font-weight: 600;
        padding: 10px 24px;
        border-radius: 10px;
    }
    .stButton>button:hover {
        background-color: #ff9800 !important;
    }
    .stTextArea textarea {
        background-color: #2a2a2a !important;
        color: white !important;
    }
    h1, h2, h3, h4 {
        color: #ffffff !important;
    }
    .block-container {
        padding-top: 2rem;
    }
    .stDownloadButton>button {
        background-color: #03dac6 !important;
        color: black !important;
        font-weight: bold;
        padding: 10px 20px;
        border-radius: 10px;
        margin-top: 10px;
    }
    .stDownloadButton>button:hover {
        background-color: #00c4b4 !important;
    }

    </style>
"""

st.markdown(dark_css if theme_mode == "Dark Mode" else light_css, unsafe_allow_html=True)


st.title("TABL Compiler")


editor_col, table_col = st.columns([2, 1])


with editor_col:
    st.subheader("Write Your TABL Commands")

    code = st_ace(
        placeholder="Example:\nbana table students (id int primary key, naam varchar, rollno int)\nstudents mein daal value naam = 'Shobhit' aur rollno = 22 aur id = 1\nstudents se nikal",
        language="sql",
        theme=editor_theme,
        height=400,
        font_size=16,
        key="tabl_sql_editor"
    )

    col1, col2 = st.columns(2)

    with col1:
        if st.button(" Run Commands"):
            st.session_state.output = ""
            st.session_state.command_tables = []

            if code:
                commands = [cmd.strip() for cmd in code.strip().split('\n') if cmd.strip()]
                for i, command in enumerate(commands, 1):
                    try:
                        tokens = tokenize(command)
                        ast = parse(tokens)
                        output = check_ast(ast)
                        if isinstance(output, list) and all(isinstance(row, dict) for row in output):
                            df = pd.DataFrame(output)
                            st.session_state.command_tables.append((i, df))
                            st.session_state.output += f"[Command {i}] (Tabular result shown above)\n"
                        else:
                            st.session_state.output += f"[Command {i}] {output}\n"

                    except Exception as e:
                        st.session_state.output += f"[Command {i}] Error: {str(e)}\n"
            else:
                st.warning(" Please enter some commands.")

    with col2:
        if st.button(" Clear Output"):
            st.session_state.output = ""


with table_col:
    st.subheader("Table Viewer")
    db = get_database()
    if not db:
        st.info(" No tables created yet.")
    else:
        selected_table = st.selectbox("Select Table", list(db.keys()))
        table = db[selected_table]

        if "schema" in table:
            columns = [col["name"] for col in table["schema"]]
            rows = table["rows"]
            if rows:
                df = pd.DataFrame(rows, columns=columns)
                st.dataframe(df, use_container_width=True)
                csv = df.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="Download CSV",
                    data=csv,
                    file_name=f"{selected_table}.csv",
                    mime="text/csv"
                )
            else:
                st.warning("This table has no rows yet.")
        else:
            st.error(" Invalid table format.")


st.markdown("---")
st.subheader(" Output Log")
if st.session_state.command_tables:
    for idx, df in st.session_state.command_tables:
        st.markdown(f"**Result of Command {idx}:**")
        st.dataframe(df, use_container_width=True, height=min(400, 40 + len(df)*35))
        csv = df.to_csv(index=False).encode('utf-8')
        st.download_button(
            label=f"Download Command {idx} Result as CSV",
            data=csv,
            file_name=f"command_{idx}_output.csv",
            mime="text/csv"
        )

st.code(st.session_state.output or "No output yet.", language='text')



ChatGPT said:
